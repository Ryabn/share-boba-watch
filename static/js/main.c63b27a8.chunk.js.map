{"version":3,"sources":["components/firebaseCalls.js","components/Index.js","components/Statistics.js","App.js","theme.js","serviceWorker.js","index.js"],"names":["db","Index","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react_default","a","createElement","Component","firebaseCalls","init","userID","firebase","sessionStorage","setItem","getStats","onSuccess","onFail","collection","doc","getItem","get","then","resp","data","catch","error","Statistics","props","_this","call","getUserData","uid","backend","foundUser","didNotFindUser","pageData","index_es","JSON","stringify","setState","display","variant","href","match","params","user","state","className","onClick","window","location","App","react_router","exact","path","component","theme","createMuiTheme","overrides","MuiButton","text","backgroundColor","borderRadius","border","color","height","padding","margin","boxShadow","fontFamily","fontWeight","fontSize","&:hover","MuiBottomNavigation","root","MuiBottomNavigationAction","iconOnly","wrapper","MuiDialogActions","action","palette","primary","main","light","contrastText","secondary","typography","useNextVariants","h1","marginBottom","h2","body1","Boolean","hostname","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","ReactDOM","render","styles","react_router_dom","basename","process","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c63b27a8.chunk.js","sourcesContent":["/**\n * @file firebaseCalls.js\n * @copyright Ryan Yang 2019\n * @summary - A set of functions to help organize all the server calls\n * in one place\n */\n\nimport * as firebase from 'firebase/app';\nimport 'firebase/firestore';\n\nlet db;\n\n/**\n * @function init\n * @description initializes the firestore and fb auth \n */\nlet init = (userID) => {\n    db = firebase.firestore();\n    sessionStorage.setItem('uid', userID);\n}\n/**\n * @function getDrinks\n * @param {*} onSuccess\n */\nlet getStats = ( onSuccess, onFail ) => {\n    db.collection( 'users' )\n    .doc(sessionStorage.getItem('uid'))\n    .collection( 'user' )\n    .doc( 'stats' )\n    .get()\n    .then( ( resp ) => {\n        onSuccess( resp.data() );\n    }).catch((error) => {\n        onFail(error);\n    });\n}\n\n\nexport default {\n    init: init,\n    getStats: getStats\n}","import React, { Component } from 'react';\n\nexport class Index extends Component {\n  render() {\n    return (\n      <div>\n        This is the default page\n      </div>\n    )\n  }\n}\n\nexport default Index\n","import React, { Component } from 'react';\nimport backend from './firebaseCalls';\nimport { Typography } from '@material-ui/core';\nimport './Statistics.css';\n\nexport class Statistics extends Component {\n    constructor(props){\n        super(props);\n        let uid = this.props.match.params.user;\n        sessionStorage.setItem('uid', uid);\n        this.getUserData( uid );\n        this.state = {\n            display: (<Typography> Loading data... </Typography>)\n        };\n    }\n    getUserData = ( uid ) => {\n        backend.init( uid );\n        backend.getStats(this.foundUser, this.didNotFindUser);\n    }\n    foundUser = ( data ) => {\n        let pageData = (\n            <Typography>\n                user info {JSON.stringify(data)}\n            </Typography>\n        );\n        this.setState({\n            display: pageData\n        });\n    }\n    didNotFindUser = ( data ) => {\n        let pageData = (\n            <Typography variant=\"body1\">\n                Sorry! This person doesn't exist or has their profile set to private. If this is your profile and would like to change it, please access your user settings in your Boba Watch account. You can find more information here -\n                 <a href=\"https://info.boba.watch/\">https://info.boba.watch/</a>\n            </Typography>\n        );\n        this.setState({\n            display: pageData\n        });\n    }\n    render() {\n        return (\n        <div className=\"statistics-page--container\">\n            <div className=\"statistics-title--holder\" onClick={() => {window.location = 'https://boba.watch/'} }>\n                <div className=\"statistics-title--logo\"></div>\n                <Typography variant=\"h1\">boba watch</Typography>\n            </div>\n            {this.state.display}\n        </div>\n        )\n    }\n}\n\nexport default Statistics;\n","import React, { Component } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Index from './components/Index';\nimport Statistics from './components/Statistics';\nimport './App.css';\n\nclass App extends Component {\n    render() {\n        return (\n            <Switch>\n                <Route exact path=\"/\" component={Index}/>\n                <Route path=\"/:user\" component={Statistics}/>\n            </Switch>\n        );\n    }\n}\n\nexport default App;\n","import {createMuiTheme} from '@material-ui/core';\n\nconst theme = createMuiTheme({\n    overrides: {\n      MuiButton: {\n        text: {\n          backgroundColor: '#F68080',\n          borderRadius: 3,\n          border: 0,\n          color: 'white',\n          height: 30,\n          padding: '0 30px',\n          margin: '20px',\n          boxShadow: '0 3px 5px 2px rgba(255, 105, 135, 0.3)',\n          fontFamily: 'Poppins',\n          fontWeight: 700,\n          fontSize: 14,\n          '&:hover': {\n            backgroundColor: '#FFDCDC'\n          }\n        },\n      },\n      MuiBottomNavigation: {\n        root: {\n            backgroundColor: '#FFAFA4',\n        }\n      },\n      MuiBottomNavigationAction: {\n        root: {\n            color: '#000000',\n        },\n        iconOnly: {\n            color: '#FF0000'\n        },\n        wrapper: {\n            color: '#FFFFFF ',\n        }\n      },\n      MuiDialogActions: {\n        action: {\n          color: '#FFFFFF'\n        },\n      }\n    },\n    palette: {\n        primary: {\n          main: '#F68080',\n          light: '#FFDCDC',\n          contrastText:'#FFFFFF'\n        },\n        secondary: {\n            main: '#FFFFFF',\n            contrastText: '#F68080',\n        },\n    },\n    typography: {\n        useNextVariants: true,\n        h1: {\n            fontFamily: 'Poppins',\n            fontWeight: 700,\n            color: '#000000',\n            fontSize: 44,\n            marginBottom: 20\n        },\n        h2: {\n            fontFamily: 'Poppins',\n            fontWeight: 700,\n            color: '#FFFFFF',\n            fontSize: 48,\n            margin: 0\n        },\n        body1: {\n            fontFamily: 'Poppins',\n            // color: '#F68080',\n            color: '#FFFFFF',\n            fontSize: 18,\n        },\n    },\n});\n\nexport default theme;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { HashRouter as Router } from 'react-router-dom';\nimport theme from './theme';\nimport { MuiThemeProvider } from '@material-ui/core';\nimport * as serviceWorker from './serviceWorker';\nimport * as firebase from 'firebase/app';\n\nlet firebaseConfig = {\n    apiKey: \"AIzaSyBePNJQYVteyh1Ll9fqnXbXc-S8fmJlbTQ\",\n    authDomain: \"boba-watch-firebase.firebaseapp.com\",\n    databaseURL: \"https://boba-watch-firebase.firebaseio.com\",\n    projectId: \"boba-watch-firebase\",\n    storageBucket: \"\",\n    messagingSenderId: \"674375234614\",\n    appId: \"1:674375234614:web:fdaf98c291204b9c\"\n};\nfirebase.initializeApp(firebaseConfig);\n\n\nReactDOM.render(\n    <MuiThemeProvider theme={theme}>\n        <Router basename={process.env.PUBLIC_URL} >\n            <App />\n        </Router>\n    </MuiThemeProvider>, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}